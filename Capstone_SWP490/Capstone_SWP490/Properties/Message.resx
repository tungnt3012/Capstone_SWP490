<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MSG001" xml:space="preserve">
    <value>SYSTEM ERROR, please try again !</value>
  </data>
  <data name="MSG002" xml:space="preserve">
    <value>Email is used, please try again!</value>
  </data>
  <data name="MSG003" xml:space="preserve">
    <value>Invalid email!</value>
  </data>
  <data name="MSG004" xml:space="preserve">
    <value>Fullname cannot be empty</value>
  </data>
  <data name="MSG005" xml:space="preserve">
    <value>Error read sheet #SHEET_NAME#</value>
  </data>
  <data name="MSG006" xml:space="preserve">
    <value>School name is empty, we uses data when you register a coach account !</value>
  </data>
  <data name="MSG007" xml:space="preserve">
    <value>Institution name is empty, we uses data when you register a coach account !</value>
  </data>
  <data name="MSG008" xml:space="preserve">
    <value>Rector name is empty, we uses data when you register a coach account!</value>
  </data>
  <data name="MSG009" xml:space="preserve">
    <value>School phone is empty, we uses data when you register a coach account!</value>
  </data>
  <data name="MSG010" xml:space="preserve">
    <value>School address is empty, we uses data when you register a coach account!</value>
  </data>
  <data name="MSG011" xml:space="preserve">
    <value>Coach name is empty, we uses information of logged in user</value>
  </data>
  <data name="MSG012" xml:space="preserve">
    <value>Coach email is empty or not match with logged in, we uses information of logged inuser</value>
  </data>
  <data name="MSG013" xml:space="preserve">
    <value>Please select the excel file end with .xlsx!</value>
  </data>
  <data name="MSG014" xml:space="preserve">
    <value>Cannot read Vice Coach because Vice Coach email is empty</value>
  </data>
  <data name="MSG015" xml:space="preserve">
    <value>Sheet {0} not found !</value>
  </data>
  <data name="MSG016" xml:space="preserve">
    <value>the Contest {0} is not existed or Individual Contest</value>
  </data>
  <data name="MSG017" xml:space="preserve">
    <value>Team Name cannot be blank or less than or equal 2 character</value>
  </data>
  <data name="MSG018" xml:space="preserve">
    <value>Team "#TEAM_NAME#" is existed in before or used by others</value>
  </data>
  <data name="MSG019" xml:space="preserve">
    <value>Team leader Name and email  cannot be blank</value>
  </data>
  <data name="MSG020" xml:space="preserve">
    <value>Member belows ROW = {0} is not accepted. Because the contest {1} is just accept {2} contestant.</value>
  </data>
  <data name="MSG021" xml:space="preserve">
    <value>School with name = {0} and Institution Name = {1} is registered before !</value>
  </data>
  <data name="MSG022" xml:space="preserve">
    <value>No team recognized, please insert data carefully !</value>
  </data>
  <data name="MSG023" xml:space="preserve">
    <value>- the Team '{0}' not defined in sheet TEAM yet, please check at sheet 'TEAM'</value>
  </data>
  <data name="MSG024" xml:space="preserve">
    <value>Email is used by other member</value>
  </data>
  <data name="MSG025" xml:space="preserve">
    <value>- Member name cannot be blank\n</value>
  </data>
  <data name="MSG026" xml:space="preserve">
    <value>- Member email is blank or invalid</value>
  </data>
  <data name="MSG027" xml:space="preserve">
    <value>- Member age must greater than or equal 15\n</value>
  </data>
  <data name="SYSTEM_ERROR" xml:space="preserve">
    <value>oops, something went wrong, please try again or contact to System admin</value>
  </data>
  <data name="UNKNOWN_ERROR" xml:space="preserve">
    <value>Unknown error</value>
  </data>
</root>